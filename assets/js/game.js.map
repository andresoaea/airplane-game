{"version":3,"sources":["webpack:///./src/js/Socket.js","webpack:///./src/js/components/Plane.js","webpack:///./src/js/components/Players.js","webpack:///./src/js/game.js","webpack:///./src/js/scenes/LoadScene.js","webpack:///./src/js/scenes/MainScene.js","webpack:///./src/js/scenes/SetPlaneScene.js","webpack:///./src/sass/game.scss?4097"],"names":["Socket","players","url","player","id","opponent","conn","WebSocket","onopen","e","console","log","msg","readyState","CLOSED","send","Plane","config","scene","x","y","planeName","add","existing","setScale","setInteractive","setData","input","on","startDrag","stablePos","planeCells","isInDropZone","firstClickTime","pointer","targets","dragObj","checkDoubleTap","off","doDrag","stopDrag","pointerDiffY","pointerDiffX","initialPos","getData","game","width","dragX","dragY","dropZone","getDropZone","height","repositionToClosest","setPlaneCells","tweens","scaleX","scaleY","duration","axis","isVertical","angle","repositionVertical","repositionHorizontal","i","closest","relativeDistance","newPos","dropZoneRect","headCellId","planeData","getPlanePositionData","headPoint","cells","forEach","cell","rect","centerX","centerY","headCords","split","map","num","parseInt","schema","originX","diff","originY","length","line","j","cellPlaceholder","push","existingCurrentPlane","planes","find","plane","name","instance","isOverlaping","checkOverlap","shift","overlap","firstPlaneCells","includes","cellSize","getTime","elapsed","d","Date","Phaser","GameObjects","Sprite","Players","getParameterByName","photo","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent","axios","require","defaults","headers","common","type","AUTO","parent","title","version","Game","LoadScene","MainScene","SetPlaneScene","start","key","load","image","showPreloader","fontStyle","fontFamily","fontSize","color","stroke","strokeThickness","shadow","offsetX","offsetY","blur","fill","progressBar","graphics","progressBox","fillStyle","fillRect","cameras","main","loadingText","make","text","style","setOrigin","percentText","value","setText","clear","destroy","Scene","physics","arcade","setBackgroundColor","drawSceneBackground","socket","onmessage","data","JSON","parse","opponentDisconnected","restart","cellId","cellClicked","fillRectShape","drawPlayerMap","sqareWidth","cellsNum","drawRect","Geom","Rectangle","lineStyle","strokeRectShape","Contains","owner","stringify","drawBgRect","plane1","plane2","cl","squareWidth","drawBorder"],"mappings":"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","file":"/js/game.js","sourcesContent":["class Socket {\n    constructor(players) {\n        const url = `ws://192.168.0.105:8080/comm?playerId=${players.player.id}&opponentId=${players.opponent.id}`;\n        const conn = new WebSocket(url);\n        conn.onopen = function(e) {\n            console.log(`Connection established to ${url}`);\n        };\n        // conn.onmessage = (e) => {\n        //     console.log(e.data);\n        // };\n        this.conn = conn;\n    }\n\n    send(msg) {\n        if (this.conn.readyState === WebSocket.CLOSED) return;\n        return this.conn.send(msg);\n    }\n}\n\nexport default Socket;\n","class Plane extends Phaser.GameObjects.Sprite {\n    constructor(config) {\n        super(config.scene, config.x, config.y, config.planeName);\n        config.scene.add.existing(this);\n\n        this.scene = config.scene;\n\n        this.setScale(0.4)\n            .setInteractive()\n            .setData('initialPos', {\n                x: this.x,\n                y: this.y,\n            });\n\n        this.scene.input.on('pointerdown', this.startDrag, this);\n\n        // Other variables\n\n        this.planeName = config.planeName;\n        this.stablePos = [];\n        this.planeCells = [];\n        this.isInDropZone = false;\n        this.firstClickTime = 0;\n        // this.lastPos = { x: 0, y: 0 };\n        // this.lastAngle = 0;\n    }\n\n    startDrag(pointer, targets) {\n        if (targets[0] !== this) return;\n        this.dragObj = targets[0];\n\n        // this.dragObj.depth++;\n        // this.scene.planes.map((plane) => {\n        //     return plane.instance.depth--;\n        // });\n\n        // if (this.scene.planes.length === 2) {\n        //     this.scene.planes.find((plane) => {\n        //         return plane.instance === this;\n        //     });\n        // }\n\n        //  console.log(this.dragObj.depth);\n        // console.log(this.planeName);\n\n        this.checkDoubleTap();\n        this.scene.input.off('pointerdown', this.startDrag, this);\n        this.scene.input.on('pointermove', this.doDrag, this);\n        this.scene.input.on('pointerup', this.stopDrag, this);\n\n        if (typeof this.dragObj !== 'undefined') {\n            this.pointerDiffY = pointer.y - this.dragObj.y;\n            this.pointerDiffX = pointer.x - this.dragObj.x;\n        }\n    }\n\n    doDrag(pointer, targets) {\n        if (targets[0] !== this) return;\n\n        if (typeof this.dragObj !== 'undefined') {\n            // Move\n            this.dragObj.x = pointer.x - this.pointerDiffX;\n            this.dragObj.y = pointer.y - this.pointerDiffY;\n\n            let initialPos = this.dragObj.getData('initialPos');\n\n            // Scale\n            if (pointer.x < initialPos.x) {\n                if (this.isInDropZone) {\n                    this.dragObj.setScale(1.1);\n                } else {\n                    this.dragObj.setScale(\n                        (game.config.width - this.dragObj.x) / 450\n                    );\n                }\n            }\n        }\n    }\n\n    stopDrag(pointer, targets) {\n        if (targets[0] !== this) return;\n\n        this.scene.input.on('pointerdown', this.startDrag, this);\n        this.scene.input.off('pointermove', this.doDrag, this);\n        this.scene.input.off('pointerup', this.stopDrag, this);\n\n        if (typeof this.dragObj == 'undefined') return;\n\n        // Check if in drop zone\n        let dragX = this.dragObj.x;\n        let dragY = this.dragObj.y;\n\n        let dropZone = this.getDropZone();\n\n        if (\n            dragX > dropZone.x &&\n            dragX < dropZone.x + dropZone.width &&\n            dragY > dropZone.y &&\n            dragY < dropZone.y + dropZone.height\n        ) {\n            // Inside drop zone\n            this.dragObj.setScale(1);\n\n            //console.log(this.lastAngle);\n\n            // if (\n            //     (this.x !== this.lastPos.x && this.y !== this.lastPos.y) ||\n            //     this.angle !== this.lastAngle\n            // ) {\n            this.repositionToClosest('x');\n            this.repositionToClosest('y');\n            // }\n\n            // this.lastPos = {\n            //     x: this.x,\n            //     y: this.y,\n            // };\n            // this.lastAngle = this.angle;\n\n            this.setPlaneCells();\n\n            this.isInDropZone = true;\n\n            //this.dragObj.x =\n        } else {\n            // Outside drop zone / Go back to initial position\n            this.scene.tweens.add({\n                targets: [this.dragObj],\n                x: this.dragObj.getData('initialPos').x,\n                y: this.dragObj.getData('initialPos').y,\n                scaleX: 0.4,\n                scaleY: 0.4,\n                duration: 500,\n            });\n\n            this.isInDropZone = false;\n        }\n    }\n\n    repositionToClosest(axis) {\n        let isVertical = this.angle === 90 || this.angle === -90;\n\n        if (isVertical) {\n            this.repositionVertical(axis);\n        } else {\n            this.repositionHorizontal(axis);\n        }\n\n        // console.log(isVertical);\n    }\n\n    repositionHorizontal(axis) {\n        let dropZone = this.getDropZone();\n\n        for (let i = 0; i < 8; i++) {\n            if (i < 2) continue;\n\n            let closest = i * 40;\n            let relativeDistance = this.dragObj[axis] - dropZone[axis];\n\n            if (axis === 'y') {\n                relativeDistance = relativeDistance + 20;\n            }\n\n            if (relativeDistance - closest < 39) {\n                // Horizontal plane\n                let newPos = closest + dropZone[axis] + (axis === 'x' ? 20 : 0);\n\n                if (i > 5) {\n                    // this.dragObj[axis] =\n                    //     5 * 40 + dropZone[axis] + (axis === 'x' ? 20 : 0);\n                    if (axis === 'x') {\n                        this.dragObj.x = 5 * 40 + dropZone.x + 20;\n                    } else {\n                        this.dragObj.y = 5 * 40 + dropZone.x;\n                    }\n                } else {\n                    this.dragObj[axis] = newPos;\n                }\n\n                break;\n            }\n        }\n    }\n\n    repositionVertical(axis) {\n        let dropZone = this.getDropZone();\n\n        for (let i = 0; i < 9; i++) {\n            if (i < 2) continue;\n\n            let closest = i * 40;\n            let relativeDistance = this.dragObj[axis] - dropZone[axis];\n\n            if (axis === 'x') {\n                relativeDistance = relativeDistance + 20;\n            }\n\n            if (relativeDistance - closest < 39) {\n                // Horizontal plane\n                let newPos = closest + dropZone[axis] + (axis === 'y' ? 20 : 0);\n\n                if (i > 5) {\n                    // this.dragObj[axis] =\n                    //     5 * 40 + dropZone[axis] + (axis === 'x' ? 20 : 0);\n                    if (axis === 'x') {\n                        this.dragObj.x = 6 * 40 + dropZone.x;\n                        //console.log('aici 1');\n                    } else {\n                        this.dragObj.y = 5 * 40 + dropZone.x - 20;\n                        ///console.log('aici 2');\n                    }\n                } else {\n                    this.dragObj[axis] = newPos;\n                }\n\n                break;\n            }\n        }\n    }\n\n    getDropZone() {\n        let { x, y, width, height } = this.scene.dropZoneRect;\n        return { x, y, width, height };\n    }\n\n    setPlaneCells() {\n        let headCellId;\n        let planeData = this.getPlanePositionData();\n        let headPoint = planeData.headPoint;\n\n        //console.log(planeData);\n\n        this.scene.cells.forEach((cell) => {\n            if (\n                cell.rect.centerX === headPoint.x &&\n                cell.rect.centerY === headPoint.y\n            ) {\n                headCellId = cell.id;\n            }\n        });\n\n        //console.log(headCellId);\n\n        let headCords = headCellId.split('').map((num) => parseInt(num));\n        headCords = { x: headCords[0], y: headCords[1] };\n\n        // let planeCells = [\n        //     headCellId,\n        //     // `${headCords.y + 1}${headCords.x - 2}`,\n        //     // `${headCords.y + 1}${headCords.x - 1}`,\n        //     // `${headCords.x}${headCords.y + 1}`,\n        //     // `${headCords.x + 1}${headCords.y + 1}`,\n        //     // `${headCords.x + 2}${headCords.y + 1}`,\n        //     // `${headCords.x}${headCords.y + 2}`,\n        //     // `${headCords.y + 3}${headCords.x - 1}`,\n        //     // `${headCords.x}${headCords.y + 3}`,\n        //     // `${headCords.x + 1}${headCords.y + 3}`,\n        // ];\n        let planeCells = [];\n\n        let schema = planeData.schema;\n\n        let originX = headCords.x + planeData.diff.x;\n        let originY = headCords.y + planeData.diff.y;\n\n        for (let i = 0; i < schema.length; i++) {\n            const line = schema[i];\n            //console.log('line', i);\n\n            for (let j = 0; j < line.length; j++) {\n                const cellPlaceholder = line[j];\n\n                if (cellPlaceholder) {\n                    planeCells.push(`${originX + j}${originY + i}`);\n                }\n\n                //console.log(`${i + 1}${j + 1}`);\n            }\n        }\n\n        //console.log(planeCells);\n        this.planeCells = planeCells;\n\n        let existingCurrentPlane = this.scene.planes.find((plane) => {\n            return plane.name === this.planeName;\n        });\n\n        if (!existingCurrentPlane) {\n            this.scene.planes.push({\n                name: this.planeName,\n                cells: planeCells,\n                instance: this,\n            });\n        }\n\n        let isOverlaping = this.checkOverlap();\n        if (!isOverlaping) {\n            this.stablePos.push({\n                x: this.x,\n                y: this.y,\n            });\n\n            if (this.stablePos.length > 1) {\n                this.stablePos.shift();\n            }\n        }\n\n        //localStorage.setItem('lastPlaceCells', planeCells.join(','));\n    }\n\n    checkOverlap() {\n        if (this.scene.planes.length < 2) return false;\n\n        let overlap = false;\n        let firstPlaneCells = this.scene.planes[0].cells;\n\n        this.planeCells.forEach((cell) => {\n            if (firstPlaneCells.includes(cell)) {\n                console.log('overlap');\n                this.x = this.stablePos[0].x;\n                this.y = this.stablePos[0].y;\n                overlap = true;\n            }\n        });\n\n        return overlap;\n    }\n\n    getPlanePositionData() {\n        let schema;\n        let headPoint;\n        let diff; // Compute start point difference\n        // It is distance in cells from plane head\n        // to plane margin (top/left 0)\n\n        switch (this.angle) {\n            case 90:\n                headPoint = {\n                    x: this.x + this.height / 2 - this.scene.cellSize / 2,\n                    y: this.y,\n                };\n                schema = [\n                    [0, 0, 1, 0],\n                    [1, 0, 1, 0],\n                    [1, 1, 1, 1],\n                    [1, 0, 1, 0],\n                    [0, 0, 1, 0],\n                ];\n                diff = {\n                    x: -3,\n                    y: -2,\n                };\n                break;\n            case -180:\n                headPoint = {\n                    x: this.x,\n                    y: this.y + this.height / 2 - this.scene.cellSize / 2,\n                };\n                schema = [\n                    [0, 1, 1, 1, 0],\n                    [0, 0, 1, 0, 0],\n                    [1, 1, 1, 1, 1],\n                    [0, 0, 1, 0, 0],\n                ];\n                diff = {\n                    x: -2,\n                    y: -3,\n                };\n                break;\n            case -90:\n                headPoint = {\n                    x: this.x - this.height / 2 + this.scene.cellSize / 2,\n                    y: this.y,\n                };\n                schema = [\n                    [0, 1, 0, 0],\n                    [0, 1, 0, 1],\n                    [1, 1, 1, 1],\n                    [0, 1, 0, 1],\n                    [0, 1, 0, 0],\n                ];\n                diff = {\n                    x: 0,\n                    y: -2,\n                };\n                break;\n\n            default:\n                headPoint = {\n                    x: this.x,\n                    y: this.y - this.height / 2 + this.scene.cellSize / 2,\n                };\n                schema = [\n                    [0, 0, 1, 0, 0],\n                    [1, 1, 1, 1, 1],\n                    [0, 0, 1, 0, 0],\n                    [0, 1, 1, 1, 0],\n                ];\n                diff = {\n                    x: -2,\n                    y: 0,\n                };\n        }\n\n        return { schema, headPoint, diff };\n    }\n\n    checkDoubleTap() {\n        if (typeof this.dragObj === 'undefined') return;\n\n        if (this.firstClickTime == 0) {\n            this.firstClickTime = this.getTime();\n            return;\n        }\n\n        let elapsed = this.getTime() - this.firstClickTime;\n\n        if (elapsed < 400) {\n            // Rotate plane on double tap\n\n            this.angle += 90;\n            // this.repositionToClosest('x');\n            // this.repositionToClosest('y');\n        }\n\n        this.firstClickTime = 0;\n    }\n\n    getTime() {\n        //make a new date object\n        let d = new Date();\n        //return the number of milliseconds since 1 January 1970 00:00:00.\n        return d.getTime();\n    }\n}\n\nexport default Plane;\n","class Players {\n    constructor() {\n        this.player = {\n            id: this.getParameterByName('userId') ?? '1',\n            name: 'User',\n            photo: null,\n        };\n\n        this.opponent = {\n            id: this.getParameterByName('opponentId') ?? '2',\n            name: 'UserOpponent',\n            photo: null,\n        };\n    }\n\n    // helper for debugging\n    getParameterByName(name, url = window.location.href) {\n        name = name.replace(/[\\[\\]]/g, '\\\\$&');\n        var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n            results = regex.exec(url);\n        if (!results) return null;\n        if (!results[2]) return '';\n        return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n    }\n}\n\nexport default Players;\n","import Phaser from 'phaser';\n// import moment, { lang } from 'moment';\n// import Swal from 'sweetalert2';\n\n// window.moment = moment;\n// window.Swal = Swal;\n\n// //indow.jQuery = window.$ = require('jquery');\nwindow.axios = require('axios');\nwindow.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n\nimport LoadScene from './scenes/LoadScene';\nimport MainScene from './scenes/MainScene';\nimport SetPlaneScene from './scenes/SetPlaneScene';\n\nlet config = {\n    type: Phaser.AUTO,\n    width: 800,\n    height: 458,\n    parent: 'game',\n    // physics: {\n    //     default: 'arcade',\n    //     arcade: {\n    //         gravity: { y: 800 },\n    //         //debug: true\n    //     },\n    // },\n    title: 'The Airplanes with Friends',\n    url: '',\n    version: '1.0.0',\n};\n\nlet game = new Phaser.Game(config);\ngame.scene.add('LoadScene', new LoadScene());\ngame.scene.add('MainScene', new MainScene());\ngame.scene.add('SetPlaneScene', new SetPlaneScene());\ngame.scene.start('LoadScene');\nwindow.game = game;\n","class LoadScene extends Phaser.Scene {\n    constructor() {\n        super({\n            key: 'LoadScene',\n        });\n    }\n\n    preload() {\n        /**\n         * LoadScene images\n         */\n\n        // this.load.multiatlas(\n        //     'atlas',\n        //     'assets/sprites/tp/atlas.json',\n        //     'assets/sprites/tp'\n        // );\n\n        this.load.image('plane-1', 'assets/images/planes/plane-1.png');\n        this.load.image('plane-2', 'assets/images/planes/plane-2.png');\n\n        this.showPreloader();\n    }\n\n    showPreloader() {\n        let scene = this;\n\n        let fontStyle = {\n            fontFamily: 'Play',\n            fontSize: 28,\n            color: '#ffffff',\n            stroke: '#fff',\n            strokeThickness: 2,\n            shadow: {\n                offsetX: 1,\n                offsetY: 1,\n                color: '#000',\n                blur: 0,\n                stroke: true,\n                fill: true,\n            },\n        };\n\n        let progressBar = scene.add.graphics();\n        let progressBox = scene.add.graphics();\n        progressBox.fillStyle(0x222222, 0.05);\n        progressBox.fillRect(\n            (game.config.width - 250) / 2,\n            game.config.height / 2 + 40,\n            250,\n            50\n        );\n\n        let width = scene.cameras.main.width;\n        let height = scene.cameras.main.height;\n        let loadingText = scene.make.text({\n            x: width / 2,\n            y: height / 2 - 50,\n            text: 'Loading...',\n            style: fontStyle,\n        });\n        loadingText.setOrigin(0.5, 0.5);\n\n        let percentText = scene.make.text({\n            x: width / 2,\n            y: height / 2 - 5,\n            text: '0%',\n            style: fontStyle,\n        });\n        percentText.setOrigin(0.5, 0.5);\n\n        scene.load.on('progress', function(value) {\n            percentText.setText(parseInt(value * 100) + '%');\n            progressBar.clear();\n            progressBar.fillStyle(0xbf4689, 1);\n            progressBar.fillRect(\n                (game.config.width - 250) / 2 + 5,\n                game.config.height / 2 + 50,\n                240 * value,\n                30\n            );\n        });\n\n        scene.load.on('complete', function() {\n            // console.log('preload done')\n\n            progressBar.destroy();\n            progressBox.destroy();\n            loadingText.destroy();\n            percentText.destroy();\n\n            //game.scene.start('Start');\n\n            game.scene.start('SetPlaneScene');\n        });\n    }\n}\n\nexport default LoadScene;\n","import Socket from '../Socket';\nimport Players from '../components/Players';\n\nclass MainScene extends Phaser.Scene {\n    constructor() {\n        super({\n            key: 'MainScene',\n            physics: {\n                arcade: {\n                    //debug: true,\n                },\n            },\n        });\n\n        this.cells = {};\n    }\n\n    init() {\n        this.cameras.main.setBackgroundColor('#fff');\n    }\n\n    create() {\n        this.drawSceneBackground();\n\n        // Setup players\n        this.players = new Players();\n\n        this.socket = new Socket(this.players);\n\n        this.socket.conn.onmessage = (e) => {\n            console.log(e.data);\n            const msg = JSON.parse(e.data);\n\n            if (msg.opponentDisconnected) {\n                console.log('opponent disconnected');\n                this.scene.restart();\n            }\n\n            const cellId = msg.cellClicked;\n            if (!cellId) return;\n\n            const graphics = this.add.graphics({\n                fillStyle: { color: 0x0000ff },\n            });\n\n            graphics.fillRectShape(this.cells[cellId.replace('p', 'o')].rect);\n        };\n\n        const x = 40;\n        const y = 80;\n\n        this.drawPlayerMap(x, y);\n        this.drawPlayerMap(440, y, 'opponent');\n\n        //debug\n        window.Socket = Socket;\n        window.MainScene = this;\n    }\n\n    drawPlayerMap(x, y, type = null) {\n        const sqareWidth = 40;\n        const cellsNum = 8;\n\n        for (let i = 0; i < cellsNum; i++) {\n            // Go vertical\n            for (let j = 0; j < cellsNum; j++) {\n                // Go horizontal\n                this.drawRect(\n                    x + j * sqareWidth,\n                    y + i * sqareWidth,\n                    sqareWidth,\n                    i,\n                    j,\n                    type\n                );\n            }\n        }\n    }\n\n    drawRect(x, y, sqareWidth, i, j, type) {\n        let rect = new Phaser.Geom.Rectangle(x, y, sqareWidth, sqareWidth);\n        //   let graphics = this.add.graphics({ fillStyle: { color: 0x0000ff } });\n        var graphics = this.add.graphics({\n            lineStyle: { width: 1, color: 0x0000aa },\n        });\n        graphics.strokeRectShape(rect);\n\n        graphics.setInteractive(\n            new Phaser.Geom.Rectangle(x, y, sqareWidth, sqareWidth),\n            Phaser.Geom.Rectangle.Contains\n        );\n\n        const owner = type === 'opponent' ? 'p' : 'o';\n\n        const id = `${owner}${j + 1}${i + 1}`;\n        this.cells[id] = { graphics, rect };\n        // graphics.setData('id', id);\n        graphics.on('pointerdown', () => {\n            if (type !== 'opponent') return;\n\n            this.socket.send(\n                JSON.stringify({\n                    cellClicked: id,\n                })\n            );\n\n            // console.log(graphics.getData('id'));\n            graphics = this.add.graphics({\n                fillStyle: { color: 0x0000ff },\n            });\n\n            graphics.fillRectShape(rect);\n        });\n    }\n\n    drawSceneBackground() {\n        const x = 0;\n        const y = 0;\n        const sqareWidth = 40;\n        const cellsNum = 20;\n\n        for (let i = 0; i < cellsNum; i++) {\n            // Go vertical\n            for (let j = 0; j < cellsNum; j++) {\n                // Go horizontal\n                this.drawBgRect(\n                    x + j * sqareWidth,\n                    y + i * sqareWidth,\n                    sqareWidth,\n                    i,\n                    j\n                );\n            }\n        }\n    }\n\n    drawBgRect(x, y, sqareWidth, i, j) {\n        let rect = new Phaser.Geom.Rectangle(x, y, sqareWidth, sqareWidth);\n        //   let graphics = this.add.graphics({ fillStyle: { color: 0x0000ff } });\n        var graphics = this.add.graphics({\n            lineStyle: { width: 1, color: 0xeeeeee },\n        });\n        graphics.strokeRectShape(rect);\n    }\n}\n\nexport default MainScene;\n","import Players from '../components/Players';\nimport Plane from '../components/Plane';\n\nclass SetPlaneScene extends Phaser.Scene {\n    constructor() {\n        super({\n            key: 'SetPlaneScene',\n            physics: {\n                arcade: {\n                    //debug: true,\n                },\n            },\n        });\n\n        this.cellSize = 40;\n        this.cells = [];\n\n        this.planes = [];\n    }\n\n    init() {\n        this.cameras.main.setBackgroundColor('#fff');\n    }\n\n    create() {\n        this.drawSceneBackground();\n\n        // Setup players\n        this.players = new Players();\n\n        // this.socket = new Socket(this.players);\n\n        const x = 120;\n        const y = 80;\n\n        this.drawPlayerMap(x, y);\n\n        //this.plane = new Plane(this);\n        let plane1 = new Plane({\n            scene: this,\n            x: game.config.width / 2 + 200,\n            y: 140,\n            planeName: 'plane-1',\n        });\n\n        let plane2 = new Plane({\n            scene: this,\n            x: game.config.width / 2 + 300,\n            y: 140,\n            planeName: 'plane-2',\n        });\n\n        //debug\n        // window.Socket = Socket;\n        window.SetPlaneScene = this;\n\n        // let cls = localStorage.getItem('lastPlaceCells').split(',');\n        // this.drawByCells(cls);\n    }\n\n    // debug\n    drawByCells(cells) {\n        cells.forEach((cl) => {\n            //   let graphics = this.add.graphics({ fillStyle: { color: 0x0000ff } });\n            var graphics = this.add.graphics({\n                lineStyle: { width: 3, color: 0x000000 },\n            });\n            graphics.strokeRectShape(this.cells[cl].rect);\n        });\n    }\n\n    drawPlayerMap(x, y) {\n        const squareWidth = this.cellSize;\n        const cellsNum = 8;\n\n        for (let i = 0; i < cellsNum; i++) {\n            // Go vertical\n            for (let j = 0; j < cellsNum; j++) {\n                // Go horizontal\n                this.drawRect(\n                    x + j * squareWidth,\n                    y + i * squareWidth,\n                    squareWidth,\n                    i,\n                    j\n                );\n            }\n        }\n\n        this.drawBorder(x, y, squareWidth, cellsNum);\n    }\n\n    drawBorder(x, y, squareWidth, cellsNum) {\n        let width = squareWidth * cellsNum;\n        let rect = new Phaser.Geom.Rectangle(x, y, width, width);\n        //   let graphics = this.add.graphics({ fillStyle: { color: 0x0000ff } });\n        let graphics = this.add.graphics({\n            lineStyle: { width: 3, color: 0x000000 },\n        });\n        graphics.strokeRectShape(rect);\n\n        this.dropZoneRect = rect;\n    }\n\n    drawRect(x, y, squareWidth, i, j, type) {\n        let rect = new Phaser.Geom.Rectangle(x, y, squareWidth, squareWidth);\n        //   let graphics = this.add.graphics({ fillStyle: { color: 0x0000ff } });\n        let graphics = this.add.graphics({\n            lineStyle: { width: 1, color: 0x000000 },\n        });\n        graphics.strokeRectShape(rect);\n\n        const id = `${j + 1}${i + 1}`;\n\n        this.cells[id] = { id, rect };\n    }\n\n    drawSceneBackground() {\n        const x = 0;\n        const y = 0;\n        const squareWidth = this.cellSize;\n        const cellsNum = 20;\n\n        for (let i = 0; i < cellsNum; i++) {\n            // Go vertical\n            for (let j = 0; j < cellsNum; j++) {\n                // Go horizontal\n                this.drawBgRect(\n                    x + j * squareWidth,\n                    y + i * squareWidth,\n                    squareWidth,\n                    i,\n                    j\n                );\n            }\n        }\n    }\n\n    drawBgRect(x, y, squareWidth, i, j) {\n        let rect = new Phaser.Geom.Rectangle(x, y, squareWidth, squareWidth);\n        //   let graphics = this.add.graphics({ fillStyle: { color: 0x0000ff } });\n        var graphics = this.add.graphics({\n            lineStyle: { width: 1, color: 0xeeeeee },\n        });\n        graphics.strokeRectShape(rect);\n    }\n}\n\nexport default SetPlaneScene;\n","// removed by extract-text-webpack-plugin"],"sourceRoot":""}