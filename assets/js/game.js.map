{"version":3,"sources":["webpack:///./src/js/Socket.js","webpack:///./src/js/components/Plane.js","webpack:///./src/js/components/Players.js","webpack:///./src/js/game.js","webpack:///./src/js/scenes/LoadScene.js","webpack:///./src/js/scenes/MainScene.js","webpack:///./src/js/scenes/SetPlaneScene.js","webpack:///./src/sass/game.scss?4097"],"names":["Socket","scene","url","players","player","id","opponent","conn","WebSocket","onopen","e","console","log","onmessage","msg","JSON","parse","data","handleReceivedMessage","action","doOpponentDisconnected","doAttack","doSetOpponentData","opponentData","cellId","cellClicked","graphics","add","fillStyle","color","fillRectShape","cells","replace","rect","start","readyState","CLOSED","send","stringify","Plane","config","x","y","planeNum","existing","setScale","setInteractive","setData","input","on","startDrag","planeName","stablePos","planeCells","isInDropZone","firstClickTime","pointer","targets","dragObj","checkDoubleTap","off","doDrag","stopDrag","pointerDiffY","pointerDiffX","initialPos","getData","game","width","dragX","dragY","dropZone","getDropZone","height","repositionToClosest","setPlaneCells","goToInitialPosition","tweens","scaleX","scaleY","duration","planes","axis","isVertical","angle","repositionVertical","repositionHorizontal","i","closest","relativeDistance","newPos","dropZoneRect","headCellId","planeData","getPlanePositionData","headPoint","forEach","cell","centerX","centerY","headCords","split","map","num","parseInt","schema","originX","diff","originY","length","line","j","cellPlaceholder","push","currPlaneExists","Object","keys","includes","instance","isOverlapping","checkOverlap","shift","firstPlaneCells","overlap","cellSize","getTime","elapsed","d","Date","Phaser","GameObjects","Sprite","Players","getParameterByName","name","photo","window","location","href","regex","RegExp","results","exec","decodeURIComponent","axios","require","defaults","headers","common","type","AUTO","parent","title","version","Game","LoadScene","MainScene","SetPlaneScene","key","load","image","showPreloader","fontStyle","fontFamily","fontSize","stroke","strokeThickness","shadow","offsetX","offsetY","blur","fill","progressBar","progressBox","fillRect","cameras","main","loadingText","make","text","style","setOrigin","percentText","value","setText","clear","destroy","Scene","physics","arcade","myPlanesCells","planesData","setBackgroundColor","cl","lineStyle","strokeRectShape","drawSceneBackground","drawPlayerMap","drawByCells","sqareWidth","cellsNum","drawRect","Geom","Rectangle","Contains","owner","socket","drawBgRect","plane1","plane2","addStartGame","mainScene","getScene","useHandCursor","allPlanesCells","keysLength","stop","squareWidth","drawBorder"],"mappings":"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","file":"/js/game.js","sourcesContent":["class Socket {\n    constructor(scene) {\n        this.scene = scene;\n        const url = `ws://192.168.0.105:8080/comm?playerId=${scene.players.player.id}&opponentId=${scene.players.opponent.id}`;\n        const conn = new WebSocket(url);\n\n        // //\n        // this.toSend = null;\n        // //\n\n        conn.onopen = (e) => {\n            console.log(`Connection established to ${url}`);\n            // this.send(this.toSend);\n        };\n        this.conn = conn;\n        conn.onmessage = (e) => {\n            // console.log(e.data);\n            const msg = JSON.parse(e.data);\n            this.handleReceivedMessage(msg);\n        };\n    }\n\n    handleReceivedMessage(msg) {\n        if (!msg.action) return;\n        console.log(msg);\n\n        switch (msg.action) {\n            case 'opponentDisconnected':\n                this.doOpponentDisconnected(msg);\n                break;\n            case 'attack':\n                this.doAttack(msg);\n                break;\n            case 'setOpponentData':\n                this.doSetOpponentData(msg);\n                break;\n        }\n    }\n\n    doSetOpponentData(msg) {\n        this.scene.opponentData = msg.opponentData;\n    }\n\n    doAttack(msg) {\n        const cellId = msg.cellClicked;\n        if (!cellId) return;\n\n        const graphics = this.scene.add.graphics({\n            fillStyle: { color: 0x0000ff },\n        });\n\n        graphics.fillRectShape(this.scene.cells[cellId.replace('p', 'o')].rect);\n    }\n\n    doOpponentDisconnected(msg) {\n        console.log('opponent disconnected');\n        this.scene.scene.start('SetPlaneScene');\n    }\n    // Used external\n    send(msg) {\n        if (this.conn.readyState === WebSocket.CLOSED) return;\n        return this.conn.send(JSON.stringify(msg));\n    }\n\n    // sendOnConnect(msg) {\n    //     this.toSend = msg;\n    // }\n}\n\nexport default Socket;\n","class Plane extends Phaser.GameObjects.Sprite {\n    constructor(config) {\n        super(config.scene, config.x, config.y, `plane-${config.planeNum}`);\n        config.scene.add.existing(this);\n\n        this.scene = config.scene;\n\n        this.setScale(0.4)\n            .setInteractive()\n            .setData('initialPos', {\n                x: this.x,\n                y: this.y,\n            });\n\n        this.scene.input.on('pointerdown', this.startDrag, this);\n\n        // Other variables\n\n        this.planeName = `plane${config.planeNum}`;\n        this.stablePos = [\n            {\n                x: this.x,\n                y: this.y,\n            },\n        ];\n        this.planeCells = [];\n        this.isInDropZone = false;\n        this.firstClickTime = 0;\n        // this.lastPos = { x: 0, y: 0 };\n        // this.lastAngle = 0;\n    }\n\n    startDrag(pointer, targets) {\n        if (targets[0] !== this) return;\n        this.dragObj = targets[0];\n\n        // this.dragObj.depth++;\n        // this.scene.planes.map((plane) => {\n        //     return plane.instance.depth--;\n        // });\n\n        // if (this.scene.planes.length === 2) {\n        //     this.scene.planes.find((plane) => {\n        //         return plane.instance === this;\n        //     });\n        // }\n\n        //  console.log(this.dragObj.depth);\n        // console.log(this.planeName);\n\n        this.checkDoubleTap();\n        this.scene.input.off('pointerdown', this.startDrag, this);\n        this.scene.input.on('pointermove', this.doDrag, this);\n        this.scene.input.on('pointerup', this.stopDrag, this);\n\n        if (typeof this.dragObj !== 'undefined') {\n            this.pointerDiffY = pointer.y - this.dragObj.y;\n            this.pointerDiffX = pointer.x - this.dragObj.x;\n        }\n    }\n\n    doDrag(pointer, targets) {\n        if (targets[0] !== this) return;\n\n        if (typeof this.dragObj !== 'undefined') {\n            // Move\n            this.dragObj.x = pointer.x - this.pointerDiffX;\n            this.dragObj.y = pointer.y - this.pointerDiffY;\n\n            let initialPos = this.dragObj.getData('initialPos');\n\n            // Scale\n            if (pointer.x < initialPos.x) {\n                if (this.isInDropZone) {\n                    this.dragObj.setScale(1.1);\n                } else {\n                    this.dragObj.setScale(\n                        (game.config.width - this.dragObj.x) / 450\n                    );\n                }\n            }\n        }\n    }\n\n    stopDrag(pointer, targets) {\n        if (targets[0] !== this) return;\n\n        this.scene.input.on('pointerdown', this.startDrag, this);\n        this.scene.input.off('pointermove', this.doDrag, this);\n        this.scene.input.off('pointerup', this.stopDrag, this);\n\n        if (typeof this.dragObj == 'undefined') return;\n\n        // Check if in drop zone\n        let dragX = this.dragObj.x;\n        let dragY = this.dragObj.y;\n\n        let dropZone = this.getDropZone();\n\n        if (\n            dragX > dropZone.x &&\n            dragX < dropZone.x + dropZone.width &&\n            dragY > dropZone.y &&\n            dragY < dropZone.y + dropZone.height\n        ) {\n            // Inside drop zone\n            this.dragObj.setScale(1);\n\n            //console.log(this.lastAngle);\n\n            // if (\n            //     (this.x !== this.lastPos.x && this.y !== this.lastPos.y) ||\n            //     this.angle !== this.lastAngle\n            // ) {\n            this.repositionToClosest('x');\n            this.repositionToClosest('y');\n            // }\n\n            // this.lastPos = {\n            //     x: this.x,\n            //     y: this.y,\n            // };\n            // this.lastAngle = this.angle;\n\n            this.setPlaneCells();\n\n            this.isInDropZone = true;\n\n            //this.dragObj.x =\n        } else {\n            // Outside drop zone / Go back to initial position\n            this.goToInitialPosition();\n\n            this.isInDropZone = false;\n        }\n    }\n\n    goToInitialPosition() {\n        this.scene.tweens.add({\n            targets: [this.dragObj],\n            x: this.dragObj.getData('initialPos').x,\n            y: this.dragObj.getData('initialPos').y,\n            scaleX: 0.4,\n            scaleY: 0.4,\n            duration: 500,\n        });\n\n        // console.log(this.scene.planes);\n        delete this.scene.planes[this.planeName];\n        // console.log(this.scene.planes);\n    }\n\n    repositionToClosest(axis) {\n        let isVertical = this.angle === 90 || this.angle === -90;\n\n        if (isVertical) {\n            this.repositionVertical(axis);\n        } else {\n            this.repositionHorizontal(axis);\n        }\n\n        // console.log(isVertical);\n    }\n\n    repositionHorizontal(axis) {\n        let dropZone = this.getDropZone();\n\n        for (let i = 0; i < 8; i++) {\n            if (i < 2) continue;\n\n            let closest = i * 40;\n            let relativeDistance = this.dragObj[axis] - dropZone[axis];\n\n            if (axis === 'y') {\n                relativeDistance = relativeDistance + 20;\n            }\n\n            if (relativeDistance - closest < 39) {\n                // Horizontal plane\n                let newPos = closest + dropZone[axis] + (axis === 'x' ? 20 : 0);\n\n                if (i > 5) {\n                    // this.dragObj[axis] =\n                    //     5 * 40 + dropZone[axis] + (axis === 'x' ? 20 : 0);\n                    if (axis === 'x') {\n                        this.dragObj.x = 5 * 40 + dropZone.x + 20;\n                    } else {\n                        this.dragObj.y = 5 * 40 + dropZone.x;\n                    }\n                } else {\n                    this.dragObj[axis] = newPos;\n                }\n\n                break;\n            }\n        }\n    }\n\n    repositionVertical(axis) {\n        let dropZone = this.getDropZone();\n\n        for (let i = 0; i < 9; i++) {\n            if (i < 2) continue;\n\n            let closest = i * 40;\n            let relativeDistance = this.dragObj[axis] - dropZone[axis];\n\n            if (axis === 'x') {\n                relativeDistance = relativeDistance + 20;\n            }\n\n            if (relativeDistance - closest < 39) {\n                // Horizontal plane\n                let newPos = closest + dropZone[axis] + (axis === 'y' ? 20 : 0);\n\n                if (i > 5) {\n                    // this.dragObj[axis] =\n                    //     5 * 40 + dropZone[axis] + (axis === 'x' ? 20 : 0);\n                    if (axis === 'x') {\n                        this.dragObj.x = 6 * 40 + dropZone.x;\n                        //console.log('aici 1');\n                    } else {\n                        this.dragObj.y = 5 * 40 + dropZone.x - 20;\n                        ///console.log('aici 2');\n                    }\n                } else {\n                    this.dragObj[axis] = newPos;\n                }\n\n                break;\n            }\n        }\n    }\n\n    getDropZone() {\n        let { x, y, width, height } = this.scene.dropZoneRect;\n        return { x, y, width, height };\n    }\n\n    setPlaneCells() {\n        let headCellId;\n        let planeData = this.getPlanePositionData();\n        let headPoint = planeData.headPoint;\n\n        //console.log(planeData);\n\n        this.scene.cells.forEach((cell) => {\n            if (\n                cell.rect.centerX === headPoint.x &&\n                cell.rect.centerY === headPoint.y\n            ) {\n                headCellId = cell.id;\n            }\n        });\n\n        //console.log(headCellId);\n\n        let headCords = headCellId.split('').map((num) => parseInt(num));\n        headCords = { x: headCords[0], y: headCords[1] };\n\n        // let planeCells = [\n        //     headCellId,\n        //     // `${headCords.y + 1}${headCords.x - 2}`,\n        //     // `${headCords.y + 1}${headCords.x - 1}`,\n        //     // `${headCords.x}${headCords.y + 1}`,\n        //     // `${headCords.x + 1}${headCords.y + 1}`,\n        //     // `${headCords.x + 2}${headCords.y + 1}`,\n        //     // `${headCords.x}${headCords.y + 2}`,\n        //     // `${headCords.y + 3}${headCords.x - 1}`,\n        //     // `${headCords.x}${headCords.y + 3}`,\n        //     // `${headCords.x + 1}${headCords.y + 3}`,\n        // ];\n        let planeCells = [];\n\n        let schema = planeData.schema;\n\n        let originX = headCords.x + planeData.diff.x;\n        let originY = headCords.y + planeData.diff.y;\n\n        for (let i = 0; i < schema.length; i++) {\n            const line = schema[i];\n            //console.log('line', i);\n\n            for (let j = 0; j < line.length; j++) {\n                const cellPlaceholder = line[j];\n\n                if (cellPlaceholder) {\n                    planeCells.push(`${originX + j}${originY + i}`);\n                }\n\n                //console.log(`${i + 1}${j + 1}`);\n            }\n        }\n\n        //console.log(planeCells);\n        this.planeCells = planeCells;\n\n        if (this.scene.planes[this.planeName]) {\n            this.scene.planes[this.planeName].cells = planeCells;\n        }\n\n        // Push current plane to planes object\n\n        const currPlaneExists = Object.keys(this.scene.planes).includes(\n            this.planeName\n        );\n\n        if (!currPlaneExists) {\n            this.scene.planes[this.planeName] = {\n                cells: planeCells,\n                instance: this,\n            };\n        }\n\n        // let existingCurrentPlane = this.scene.planes.find((plane) => {\n        //     return plane.name === this.planeName;\n        // });\n\n        // if (!existingCurrentPlane) {\n        //     this.scene.planes.push({\n        //         name: this.planeName,\n        //         cells: planeCells,\n        //         instance: this,\n        //     });\n        // }\n\n        // Check for overlap\n        let isOverlapping = this.checkOverlap();\n        console.log(isOverlapping);\n        if (!isOverlapping) {\n            this.stablePos.push({\n                x: this.x,\n                y: this.y,\n            });\n\n            if (this.stablePos.length > 1) {\n                this.stablePos.shift();\n            }\n        }\n\n        //localStorage.setItem('lastPlaceCells', planeCells.join(','));\n    }\n\n    checkOverlap() {\n        let keys = Object.keys(this.scene.planes);\n        if (keys.length < 2) return false;\n\n        let firstPlaneCells = this.scene.planes[keys[0]].cells;\n        // console.log(firstPlaneCells);\n        let overlap = false;\n\n        for (let i = 0; i < this.planeCells.length; i++) {\n            if (firstPlaneCells.includes(this.planeCells[i])) {\n                //console.log('overlap');\n\n                // Reposition plane back to last stable positio\n                if (\n                    this.stablePos[0].x === this.getData('initialPos').x &&\n                    this.stablePos[0].y === this.getData('initialPos').y\n                ) {\n                    this.goToInitialPosition();\n\n                    //console.log('overl init');\n                } else {\n                    this.x = this.stablePos[0].x;\n                    this.y = this.stablePos[0].y;\n                    // console.log('overl afetr');\n                }\n\n                console.log(this.planeCells[i]);\n\n                overlap = true;\n                break;\n            }\n        }\n\n        return overlap;\n    }\n\n    getPlanePositionData() {\n        let schema;\n        let headPoint;\n        let diff; // Compute start point difference\n        // It is distance in cells from plane head\n        // to plane margin (top/left 0)\n\n        switch (this.angle) {\n            case 90:\n                headPoint = {\n                    x: this.x + this.height / 2 - this.scene.cellSize / 2,\n                    y: this.y,\n                };\n                schema = [\n                    [0, 0, 1, 0],\n                    [1, 0, 1, 0],\n                    [1, 1, 1, 1],\n                    [1, 0, 1, 0],\n                    [0, 0, 1, 0],\n                ];\n                diff = {\n                    x: -3,\n                    y: -2,\n                };\n                break;\n            case -180:\n                headPoint = {\n                    x: this.x,\n                    y: this.y + this.height / 2 - this.scene.cellSize / 2,\n                };\n                schema = [\n                    [0, 1, 1, 1, 0],\n                    [0, 0, 1, 0, 0],\n                    [1, 1, 1, 1, 1],\n                    [0, 0, 1, 0, 0],\n                ];\n                diff = {\n                    x: -2,\n                    y: -3,\n                };\n                break;\n            case -90:\n                headPoint = {\n                    x: this.x - this.height / 2 + this.scene.cellSize / 2,\n                    y: this.y,\n                };\n                schema = [\n                    [0, 1, 0, 0],\n                    [0, 1, 0, 1],\n                    [1, 1, 1, 1],\n                    [0, 1, 0, 1],\n                    [0, 1, 0, 0],\n                ];\n                diff = {\n                    x: 0,\n                    y: -2,\n                };\n                break;\n\n            default:\n                headPoint = {\n                    x: this.x,\n                    y: this.y - this.height / 2 + this.scene.cellSize / 2,\n                };\n                schema = [\n                    [0, 0, 1, 0, 0],\n                    [1, 1, 1, 1, 1],\n                    [0, 0, 1, 0, 0],\n                    [0, 1, 1, 1, 0],\n                ];\n                diff = {\n                    x: -2,\n                    y: 0,\n                };\n        }\n\n        return { schema, headPoint, diff };\n    }\n\n    checkDoubleTap() {\n        if (typeof this.dragObj === 'undefined') return;\n\n        if (this.firstClickTime == 0) {\n            this.firstClickTime = this.getTime();\n            return;\n        }\n\n        let elapsed = this.getTime() - this.firstClickTime;\n\n        if (elapsed < 400) {\n            // Rotate plane on double tap\n\n            this.angle += 90;\n            // this.repositionToClosest('x');\n            // this.repositionToClosest('y');\n        }\n\n        this.firstClickTime = 0;\n    }\n\n    getTime() {\n        //make a new date object\n        let d = new Date();\n        //return the number of milliseconds since 1 January 1970 00:00:00.\n        return d.getTime();\n    }\n}\n\nexport default Plane;\n","class Players {\n    constructor() {\n        this.player = {\n            id: this.getParameterByName('userId') ?? '1',\n            name: 'User',\n            photo: null,\n        };\n\n        this.opponent = {\n            id: this.getParameterByName('opponentId') ?? '2',\n            name: 'UserOpponent',\n            photo: null,\n        };\n    }\n\n    // helper for debugging\n    getParameterByName(name, url = window.location.href) {\n        name = name.replace(/[\\[\\]]/g, '\\\\$&');\n        var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n            results = regex.exec(url);\n        if (!results) return null;\n        if (!results[2]) return '';\n        return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n    }\n}\n\nexport default Players;\n","import Phaser from 'phaser';\n// import moment, { lang } from 'moment';\n// import Swal from 'sweetalert2';\n\n// window.moment = moment;\n// window.Swal = Swal;\n\n// //indow.jQuery = window.$ = require('jquery');\nwindow.axios = require('axios');\nwindow.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n\nimport LoadScene from './scenes/LoadScene';\nimport MainScene from './scenes/MainScene';\nimport SetPlaneScene from './scenes/SetPlaneScene';\n\nlet config = {\n    type: Phaser.AUTO,\n    width: 800,\n    height: 458,\n    parent: 'game',\n    // physics: {\n    //     default: 'arcade',\n    //     arcade: {\n    //         gravity: { y: 800 },\n    //         //debug: true\n    //     },\n    // },\n    title: 'The Airplanes with Friends',\n    url: '',\n    version: '1.0.0',\n};\n\nlet game = new Phaser.Game(config);\ngame.scene.add('LoadScene', new LoadScene());\ngame.scene.add('MainScene', new MainScene());\ngame.scene.add('SetPlaneScene', new SetPlaneScene());\ngame.scene.start('LoadScene');\nwindow.game = game;\n","class LoadScene extends Phaser.Scene {\n    constructor() {\n        super({\n            key: 'LoadScene',\n        });\n    }\n\n    preload() {\n        /**\n         * LoadScene images\n         */\n\n        // this.load.multiatlas(\n        //     'atlas',\n        //     'assets/sprites/tp/atlas.json',\n        //     'assets/sprites/tp'\n        // );\n\n        this.load.image('btn-start-game', 'assets/images/btn-start-game.png');\n        this.load.image('plane-1', 'assets/images/planes/plane-1.png');\n        this.load.image('plane-2', 'assets/images/planes/plane-2.png');\n\n        this.showPreloader();\n    }\n\n    showPreloader() {\n        let scene = this;\n\n        let fontStyle = {\n            fontFamily: 'Play',\n            fontSize: 28,\n            color: '#ffffff',\n            stroke: '#fff',\n            strokeThickness: 2,\n            shadow: {\n                offsetX: 1,\n                offsetY: 1,\n                color: '#000',\n                blur: 0,\n                stroke: true,\n                fill: true,\n            },\n        };\n\n        let progressBar = scene.add.graphics();\n        let progressBox = scene.add.graphics();\n        progressBox.fillStyle(0x222222, 0.05);\n        progressBox.fillRect(\n            (game.config.width - 250) / 2,\n            game.config.height / 2 + 40,\n            250,\n            50\n        );\n\n        let width = scene.cameras.main.width;\n        let height = scene.cameras.main.height;\n        let loadingText = scene.make.text({\n            x: width / 2,\n            y: height / 2 - 50,\n            text: 'Loading...',\n            style: fontStyle,\n        });\n        loadingText.setOrigin(0.5, 0.5);\n\n        let percentText = scene.make.text({\n            x: width / 2,\n            y: height / 2 - 5,\n            text: '0%',\n            style: fontStyle,\n        });\n        percentText.setOrigin(0.5, 0.5);\n\n        scene.load.on('progress', function(value) {\n            percentText.setText(parseInt(value * 100) + '%');\n            progressBar.clear();\n            progressBar.fillStyle(0xbf4689, 1);\n            progressBar.fillRect(\n                (game.config.width - 250) / 2 + 5,\n                game.config.height / 2 + 50,\n                240 * value,\n                30\n            );\n        });\n\n        scene.load.on('complete', function() {\n            // console.log('preload done')\n\n            progressBar.destroy();\n            progressBox.destroy();\n            loadingText.destroy();\n            percentText.destroy();\n\n            //game.scene.start('Start');\n\n            game.scene.start('SetPlaneScene');\n        });\n    }\n}\n\nexport default LoadScene;\n","// import Socket from '../Socket';\nimport Players from '../components/Players';\n\nclass MainScene extends Phaser.Scene {\n    constructor() {\n        super({\n            key: 'MainScene',\n            physics: {\n                arcade: {\n                    //debug: true,\n                },\n            },\n        });\n\n        this.cells = {};\n        this.opponentData = {}; // it is set on Socket class\n    }\n\n    init(data) {\n        this.myPlanesCells = data.planesData.cells;\n        // console.log('heads', this.myPlanesCells[0], this.myPlanesCells[10]);\n        this.cameras.main.setBackgroundColor('#fff');\n    }\n\n    //debug\n    drawByCells(cells) {\n        // console.log(this.cells);\n\n        cells.forEach((cl) => {\n            //   let graphics = this.add.graphics({ fillStyle: { color: 0x0000ff } });\n            var graphics = this.add.graphics({\n                lineStyle: { width: 3, color: 0x000000 },\n            });\n            graphics.strokeRectShape(this.cells[`o${cl}`].rect);\n        });\n    }\n\n    create() {\n        this.drawSceneBackground();\n\n        // this.socket.sendOnConnect({\n        //     action: 'setOpponentData',\n        //     opponentData: {\n        //         planesCells: this.myPlanesCells,\n        //     },\n        // });\n\n        this.drawPlayerMap(40, 80);\n        this.drawPlayerMap(440, 80, 'opponent');\n\n        //debug\n        //window.Socket = Socket;\n        window.MainScene = this;\n        this.drawByCells(this.myPlanesCells);\n    }\n\n    drawPlayerMap(x, y, type = null) {\n        const sqareWidth = 40;\n        const cellsNum = 8;\n\n        for (let i = 0; i < cellsNum; i++) {\n            // Go vertical\n            for (let j = 0; j < cellsNum; j++) {\n                // Go horizontal\n                this.drawRect(\n                    x + j * sqareWidth,\n                    y + i * sqareWidth,\n                    sqareWidth,\n                    i,\n                    j,\n                    type\n                );\n            }\n        }\n    }\n\n    drawRect(x, y, sqareWidth, i, j, type) {\n        let rect = new Phaser.Geom.Rectangle(x, y, sqareWidth, sqareWidth);\n        //   let graphics = this.add.graphics({ fillStyle: { color: 0x0000ff } });\n        var graphics = this.add.graphics({\n            lineStyle: { width: 1, color: 0x0000aa },\n        });\n        graphics.strokeRectShape(rect);\n\n        graphics.setInteractive(\n            new Phaser.Geom.Rectangle(x, y, sqareWidth, sqareWidth),\n            Phaser.Geom.Rectangle.Contains\n        );\n\n        const owner = type === 'opponent' ? 'p' : 'o';\n\n        const id = `${owner}${j + 1}${i + 1}`;\n        this.cells[id] = { graphics, rect };\n        // graphics.setData('id', id);\n        graphics.on('pointerdown', () => {\n            if (type !== 'opponent') return;\n\n            this.socket.send({\n                action: 'attack',\n                cellClicked: id,\n            });\n\n            // console.log(graphics.getData('id'));\n            graphics = this.add.graphics({\n                fillStyle: { color: 0x0000ff },\n            });\n\n            graphics.fillRectShape(rect);\n        });\n    }\n\n    drawSceneBackground() {\n        const x = 0;\n        const y = 0;\n        const sqareWidth = 40;\n        const cellsNum = 20;\n\n        for (let i = 0; i < cellsNum; i++) {\n            // Go vertical\n            for (let j = 0; j < cellsNum; j++) {\n                // Go horizontal\n                this.drawBgRect(\n                    x + j * sqareWidth,\n                    y + i * sqareWidth,\n                    sqareWidth,\n                    i,\n                    j\n                );\n            }\n        }\n    }\n\n    drawBgRect(x, y, sqareWidth, i, j) {\n        let rect = new Phaser.Geom.Rectangle(x, y, sqareWidth, sqareWidth);\n        //   let graphics = this.add.graphics({ fillStyle: { color: 0x0000ff } });\n        var graphics = this.add.graphics({\n            lineStyle: { width: 1, color: 0xeeeeee },\n        });\n        graphics.strokeRectShape(rect);\n    }\n}\n\nexport default MainScene;\n","import Players from '../components/Players';\nimport Plane from '../components/Plane';\nimport Socket from '../Socket';\n\nclass SetPlaneScene extends Phaser.Scene {\n    constructor() {\n        super({\n            key: 'SetPlaneScene',\n            physics: {\n                arcade: {\n                    //debug: true,\n                },\n            },\n        });\n\n        this.cellSize = 40;\n        this.cells = [];\n\n        this.planes = {};\n    }\n\n    init() {\n        this.cameras.main.setBackgroundColor('#fff');\n    }\n\n    create() {\n        this.drawSceneBackground();\n\n        // Setup players\n        this.players = new Players();\n\n        const x = 120;\n        const y = 80;\n\n        this.drawPlayerMap(x, y);\n\n        //this.plane = new Plane(this);\n        let plane1 = new Plane({\n            scene: this,\n            x: game.config.width / 2 + 200,\n            y: 140,\n            planeNum: 1,\n        });\n\n        let plane2 = new Plane({\n            scene: this,\n            x: game.config.width / 2 + 300,\n            y: 140,\n            planeNum: 2,\n        });\n\n        // Start game btn\n        this.addStartGame();\n\n        let mainScene = game.scene.getScene('MainScene');\n        mainScene.players = this.players;\n        this.socket = new Socket(mainScene);\n        mainScene.socket = this.socket;\n\n        //debug\n        // window.Socket = Socket;\n        window.SetPlaneScene = this;\n\n        // let cls = localStorage.getItem('lastPlaceCells').split(',');\n        // this.drawByCells(cls);\n    }\n\n    addStartGame() {\n        this.add\n            .image(630, 380, 'btn-start-game')\n            .setInteractive({ useHandCursor: true })\n            .on('pointerup', () => {\n                // let heads = [];\n                let allPlanesCells = [];\n\n                let keys = Object.keys(this.planes);\n                let keysLength = keys.length;\n\n                if (keysLength < 2) {\n                    // add 2 planes\n                    return;\n                }\n\n                for (let i = 0; i < keysLength; i++) {\n                    //heads.push(this.planes[keys[i]].cells[0]);\n                    allPlanesCells = [\n                        ...allPlanesCells,\n                        ...this.planes[keys[i]].cells,\n                    ];\n                }\n\n                this.scene.stop();\n                this.scene.start('MainScene', {\n                    planesData: {\n                        cells: allPlanesCells,\n                    },\n                });\n            });\n    }\n\n    // debug\n    drawByCells(cells) {\n        cells.forEach((cl) => {\n            //   let graphics = this.add.graphics({ fillStyle: { color: 0x0000ff } });\n            var graphics = this.add.graphics({\n                lineStyle: { width: 3, color: 0x000000 },\n            });\n            graphics.strokeRectShape(this.cells[cl].rect);\n        });\n    }\n\n    drawPlayerMap(x, y) {\n        const squareWidth = this.cellSize;\n        const cellsNum = 8;\n\n        for (let i = 0; i < cellsNum; i++) {\n            // Go vertical\n            for (let j = 0; j < cellsNum; j++) {\n                // Go horizontal\n                this.drawRect(\n                    x + j * squareWidth,\n                    y + i * squareWidth,\n                    squareWidth,\n                    i,\n                    j\n                );\n            }\n        }\n\n        this.drawBorder(x, y, squareWidth, cellsNum);\n    }\n\n    drawBorder(x, y, squareWidth, cellsNum) {\n        let width = squareWidth * cellsNum;\n        let rect = new Phaser.Geom.Rectangle(x, y, width, width);\n        //   let graphics = this.add.graphics({ fillStyle: { color: 0x0000ff } });\n        let graphics = this.add.graphics({\n            lineStyle: { width: 3, color: 0x000000 },\n        });\n        graphics.strokeRectShape(rect);\n\n        this.dropZoneRect = rect;\n    }\n\n    drawRect(x, y, squareWidth, i, j, type) {\n        let rect = new Phaser.Geom.Rectangle(x, y, squareWidth, squareWidth);\n        //   let graphics = this.add.graphics({ fillStyle: { color: 0x0000ff } });\n        let graphics = this.add.graphics({\n            lineStyle: { width: 1, color: 0x000000 },\n        });\n        graphics.strokeRectShape(rect);\n\n        const id = `${j + 1}${i + 1}`;\n\n        this.cells[id] = { id, rect };\n    }\n\n    drawSceneBackground() {\n        const x = 0;\n        const y = 0;\n        const squareWidth = this.cellSize;\n        const cellsNum = 20;\n\n        for (let i = 0; i < cellsNum; i++) {\n            // Go vertical\n            for (let j = 0; j < cellsNum; j++) {\n                // Go horizontal\n                this.drawBgRect(\n                    x + j * squareWidth,\n                    y + i * squareWidth,\n                    squareWidth,\n                    i,\n                    j\n                );\n            }\n        }\n    }\n\n    drawBgRect(x, y, squareWidth, i, j) {\n        let rect = new Phaser.Geom.Rectangle(x, y, squareWidth, squareWidth);\n        //   let graphics = this.add.graphics({ fillStyle: { color: 0x0000ff } });\n        var graphics = this.add.graphics({\n            lineStyle: { width: 1, color: 0xeeeeee },\n        });\n        graphics.strokeRectShape(rect);\n    }\n}\n\nexport default SetPlaneScene;\n","// removed by extract-text-webpack-plugin"],"sourceRoot":""}